import telebot
from telebot import types
import google.generativeai as genai
import os
from flask import Flask
import threading
import json

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
LOG_CHANNEL_ID = os.environ.get('LOG_CHANNEL_ID')
ADMIN_ID = 1152974866  # <<< –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û –ù–ê –í–ê–® TELEGRAM ID

USERS_FILE = 'users.json'
app = Flask(__name__)

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ---
def load_users():
    if not os.path.exists(USERS_FILE): return {}
    with open(USERS_FILE, 'r', encoding='utf-8') as f:
        try: return json.load(f)
        except json.JSONDecodeError: return {}

def save_users(users_data):
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users_data, f, indent=4, ensure_ascii=False)

# --- –í–ï–ë-–°–ï–†–í–ï–† (–¥–ª—è Render) ---
@app.route('/')
def index(): return "Bot is running!"

def run_flask_app():
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò –ò–ò ---
try:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-1.5-flash')
    print("–ú–æ–¥–µ–ª—å Gemini —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
except Exception as e:
    print(f"!!! –û–®–ò–ë–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò GEMINI: {e}")
    model = None

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
users = load_users()
print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–æ—á–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é...")

# --- –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ –ò –ï–ï –õ–û–ì–ò–ö–ê ---
def admin_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'), types.KeyboardButton('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞–º–∏'), types.KeyboardButton('üì¢ –†–∞—Å—Å—ã–ª–∫–∞'))
    return markup

@bot.message_handler(commands=['admin'], func=lambda m: m.from_user.id == ADMIN_ID)
def show_admin_panel(message):
    bot.reply_to(message, "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_keyboard())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
@bot.message_handler(func=lambda m: m.from_user.id == ADMIN_ID and m.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def handle_stats(message):
    stats = {'allowed': 0, 'pending': 0, 'rejected': 0}
    for data in users.values(): stats[data.get('status', 'rejected')] += 1
    reply = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['allowed']}\n‚è≥ –û–∂–∏–¥–∞—é—Ç: {stats['pending']}\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ/–ó–∞–±–∞–Ω–µ–Ω–æ: {stats['rejected']}\n\n–í—Å–µ–≥–æ –≤ –±–∞–∑–µ: {len(users)}"
    bot.reply_to(message, reply)

@bot.message_handler(func=lambda m: m.from_user.id == ADMIN_ID and m.text == 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞–º–∏')
def handle_manage_students_button(message):
    allowed_users = {uid: data for uid, data in users.items() if data.get('status') == 'allowed'}
    if not allowed_users:
        bot.reply_to(message, "–ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    for uid, data in allowed_users.items():
        markup.add(types.InlineKeyboardButton(f"{data.get('first_name', 'N/A')} ({uid})", callback_data=f"manage_{uid}"))
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.from_user.id == ADMIN_ID and m.text == 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞')
def handle_broadcast_button(message):
    msg = bot.reply_to(message, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º —É—á–µ–Ω–∏–∫–∞–º.")
    bot.register_next_step_handler(msg, process_broadcast_message)

def process_broadcast_message(message):
    text_to_send = message.text
    sent_count = 0
    allowed_ids = [uid for uid, data in users.items() if data.get('status') == 'allowed']
    if not allowed_ids:
        bot.reply_to(message, "–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    for user_id in allowed_ids:
        try:
            bot.send_message(user_id, text_to_send)
            sent_count += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
    bot.reply_to(message, f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {len(allowed_ids)} —É—á–µ–Ω–∏–∫–∞–º.")

# --- –õ–û–ì–ò–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ---
@bot.message_handler(commands=['start'])
def handle_start(message):
    if message.from_user.id == ADMIN_ID: show_admin_panel(message); return
    user_id = str(message.from_user.id)
    if user_id in users and users[user_id]['status'] == 'allowed':
        bot.reply_to(message, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω—ã.")
    elif user_id in users and users[user_id]['status'] == 'pending':
        bot.reply_to(message, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
    else:
        first_name, username = message.from_user.first_name, message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        users[user_id] = {'first_name': first_name, 'username': username, 'status': 'pending'}
        save_users(users)
        bot.reply_to(message, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"allow_{user_id}"), types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}"))
        admin_text = f"‚ùóÔ∏è –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø:\n\n–ò–º—è: {first_name}\nUsername: @{username}\nID: {user_id}"
        bot.send_message(ADMIN_ID, admin_text, reply_markup=markup)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –ù–ê–ñ–ê–¢–ò–ô –ù–ê –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–ö–ò ---
@bot.callback_query_handler(func=lambda call: call.from_user.id == ADMIN_ID)
def handle_callbacks(call):
    action, user_id = call.data.split('_', 1)

    if action == 'allow' or action == 'reject':
        if user_id in users:
            new_status = 'allowed' if action == 'allow' else 'rejected'
            users[user_id]['status'] = new_status
            save_users(users)
            bot.edit_message_text(f"–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: {new_status} –¥–ª—è {user_id}.", call.message.chat.id, call.message.message_id)
            if new_status == 'allowed': bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
            else: bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    
    elif action == 'manage':
        if user_id in users:
            markup = types.InlineKeyboardMarkup(row_width=2)
            markup.add(types.InlineKeyboardButton("‚ùå –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"reject_{user_id}"),
                       types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{user_id}"))
            user_info = users[user_id]
            bot.edit_message_text(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–º:\n–ò–º—è: {user_info.get('first_name', 'N/A')}\nID: `{user_id}`",
                                  call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='Markdown')

    elif action == 'delete':
        if user_id in users:
            name = users[user_id].get('first_name', user_id)
            del users[user_id]
            save_users(users)
            bot.edit_message_text(f"‚úÖ –£—á–µ–Ω–∏–∫ {name} ({user_id}) –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã.", call.message.chat.id, call.message.message_id)

# --- –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.from_user.id == ADMIN_ID:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /admin.", reply_markup=admin_keyboard()); return
    user_id = str(message.from_user.id)
    if not users.get(user_id) or users[user_id].get('status') != 'allowed':
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –∑–∞—è–≤–∫–∏."); return
    
    if LOG_CHANNEL_ID:
        try: bot.send_message(LOG_CHANNEL_ID, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {users[user_id].get('first_name', 'N/A')} ({user_id}):\n\n{message.text}")
        except Exception as e: print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥: {e}")

    if not model: bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥–µ–ª—å –ò–ò –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞."); return
    try:
        response = model.generate_content(message.text)
        bot.reply_to(message, response.text)
    except Exception as e:
        print(f"!!! –û–®–ò–ë–ö–ê GEMINI: {e}"); bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# --- –ó–ê–ü–£–°–ö ---
if __name__ == "__main__":
    flask_thread = threading.Thread(target=run_flask_app)
    flask_thread.start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    bot.polling(non_stop=True)
