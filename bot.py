import telebot
from telebot import types
import google.generativeai as genai
import os
from flask import Flask
import threading
import json

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
ADMIN_ID = 1152974866  # <<< –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û –ù–ê –í–ê–® TELEGRAM ID

USERS_FILE = 'users.json'
app = Flask(__name__)

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ---
def load_users():
    if not os.path.exists(USERS_FILE):
        return {}
    with open(USERS_FILE, 'r', encoding='utf-8') as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {}

def save_users(users_data):
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users_data, f, indent=4, ensure_ascii=False)

# --- –í–ï–ë-–°–ï–†–í–ï–† (–¥–ª—è Render) ---
@app.route('/')
def index(): return "Bot is running!"

def run_flask_app():
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò –ò–ò ---
try:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-1.5-flash')
    print("–ú–æ–¥–µ–ª—å Gemini —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
except Exception as e:
    print(f"!!! –û–®–ò–ë–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò GEMINI: {e}")
    model = None

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
users = load_users()
admin_states = {} # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∞ –≤ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö

print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é...")

# --- –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ –ò –ï–ï –õ–û–ì–ò–ö–ê ---

def admin_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    btn2 = types.KeyboardButton('üë• –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤')
    markup.add(btn1, btn2)
    return markup

@bot.message_handler(commands=['admin'], func=lambda m: m.from_user.id == ADMIN_ID)
def show_admin_panel(message):
    bot.reply_to(message, "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_keyboard())

@bot.message_handler(func=lambda m: m.from_user.id == ADMIN_ID and m.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def handle_stats(message):
    stats = {'allowed': 0, 'pending': 0, 'rejected': 0}
    for user_id, data in users.items():
        status = data.get('status', 'rejected')
        if status in stats:
            stats[status] += 1
    
    reply = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
             f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∏: {stats['allowed']}\n"
             f"‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {stats['pending']}\n"
             f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ/–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ: {stats['rejected']}\n\n"
             f"–í—Å–µ–≥–æ –≤ –±–∞–∑–µ: {len(users)}")
    bot.reply_to(message, reply)

@bot.message_handler(func=lambda m: m.from_user.id == ADMIN_ID and m.text == 'üë• –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤')
def handle_list_students(message):
    allowed_users = {uid: data for uid, data in users.items() if data.get('status') == 'allowed'}
    if not allowed_users:
        bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞.")
        return
    
    reply = "üë• –°–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤:\n\n"
    for user_id, data in allowed_users.items():
        reply += (f"–ò–º—è: {data.get('first_name', 'N/A')}\n"
                  f"ID: `{user_id}`\n\n") # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ID
    bot.reply_to(message, reply, parse_mode='Markdown')

# --- –õ–û–ì–ò–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ò –û–î–û–ë–†–ï–ù–ò–Ø ---

@bot.message_handler(commands=['start'])
def handle_start(message):
    if message.from_user.id == ADMIN_ID:
        show_admin_panel(message)
        return

    user_id = str(message.from_user.id)
    user_data = users.get(user_id)

    if user_data:
        status = user_data.get('status', 'rejected')
        if status == 'allowed':
            bot.reply_to(message, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        elif status == 'pending':
            bot.reply_to(message, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –µ—â–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ.")
        else: # rejected
            bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        first_name = message.from_user.first_name
        username = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        
        users[user_id] = {'first_name': first_name, 'username': username, 'status': 'pending'}
        save_users(users)
        
        bot.reply_to(message, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")
        
        markup = types.InlineKeyboardMarkup()
        btn_allow = types.InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"allow_{user_id}")
        btn_reject = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
        markup.add(btn_allow, btn_reject)
        
        admin_text = (f"‚ùóÔ∏è –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø:\n\n"
                      f"–ò–º—è: {first_name}\n"
                      f"Username: @{username}\n"
                      f"Telegram ID: {user_id}")
        bot.send_message(ADMIN_ID, admin_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.from_user.id == ADMIN_ID)
def handle_approval(call):
    action, user_id = call.data.split('_')
    
    if user_id in users:
        new_status = 'allowed' if action == 'allow' else 'rejected'
        users[user_id]['status'] = new_status
        save_users(users)
        
        bot.edit_message_text(f"–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: {new_status} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.", call.message.chat.id, call.message.message_id)
        
        if new_status == 'allowed':
            bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        else:
            bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    else:
        bot.edit_message_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", call.message.chat.id, call.message.message_id)


# --- –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ---
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    # –ê–¥–º–∏–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –∏ –∫–æ–º–∞–Ω–¥—ã
    if message.from_user.id == ADMIN_ID:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /admin.", reply_markup=admin_keyboard())
        return

    user_id = str(message.from_user.id)
    user_data = users.get(user_id)

    if not user_data or user_data.get('status') != 'allowed':
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.")
        return
        
    if not model:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥–µ–ª—å –ò–ò –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
        return
    try:
        response = model.generate_content(message.text)
        bot.reply_to(message, response.text)
    except Exception as e:
        print(f"!!! –ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê: {e}")
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")


# --- –ó–ê–ü–£–°–ö ---
if __name__ == "__main__":
    flask_thread = threading.Thread(target=run_flask_app)
    flask_thread.start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    bot.polling(non_stop=True)
