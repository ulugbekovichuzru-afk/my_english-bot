import telebot
from telebot import types
import google.generativeai as genai
import os
from flask import Flask
import threading
import json

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
ADMIN_ID = 1152974866  # <<< –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û –ù–ê –í–ê–® TELEGRAM ID

USERS_FILE = 'users.json'
app = Flask(__name__)

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ---
def load_users():
    if not os.path.exists(USERS_FILE):
        return {}
    with open(USERS_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_users(users_data):
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users_data, f, indent=4, ensure_ascii=False)

# --- –í–ï–ë-–°–ï–†–í–ï–† (–¥–ª—è Render) ---
@app.route('/')
def index(): return "Bot is running!"

def run_flask_app():
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò –ò–ò ---
try:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-1.5-flash')
    print("–ú–æ–¥–µ–ª—å Gemini —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
except Exception as e:
    print(f"!!! –û–®–ò–ë–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò GEMINI: {e}")
    model = None

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
users = load_users()
print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏...")

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ ---
def is_admin(message):
    return message.from_user.id == ADMIN_ID

# --- –ù–û–í–´–ï –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ì–†–£–ü–ü ---

@bot.message_handler(commands=['assign', 'move'], func=is_admin)
def assign_or_move_group(message):
    """–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ."""
    try:
        parts = message.text.split(maxsplit=2)
        user_id = parts[1]
        group_name = parts[2]
        if user_id in users and users[user_id]['status'] == 'allowed':
            old_group = users[user_id].get('group', '–ë–µ–∑ –≥—Ä—É–ø–ø—ã')
            users[user_id]['group'] = group_name
            save_users(users)
            bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –£—á–µ–Ω–∏–∫ {users[user_id]['first_name']} (`{user_id}`) –ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã '{old_group}' –≤ –≥—Ä—É–ø–ø—É '{group_name}'.")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –£—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω.")
    except IndexError:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /assign <user_id> <group_name> –ò–õ–ò /move <user_id> <group_name>")

@bot.message_handler(commands=['removefromgroup'], func=is_admin)
def remove_from_group(message):
    try:
        user_id = message.text.split()[1]
        if user_id in users and users[user_id]['status'] == 'allowed':
            users[user_id]['group'] = None # –£–±–∏—Ä–∞–µ–º —É—á–µ–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
            save_users(users)
            bot.reply_to(message, f"‚úÖ –£—á–µ–Ω–∏–∫ {users[user_id]['first_name']} (`{user_id}`) —É–¥–∞–ª–µ–Ω –∏–∑ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã.")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –£—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω.")
    except IndexError:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removefromgroup <user_id>")

@bot.message_handler(commands=['broadcast'], func=is_admin)
def broadcast_message(message):
    try:
        parts = message.text.split(maxsplit=2)
        group_name = parts[1]
        text_to_send = parts[2]
        
        sent_count = 0
        user_list = [uid for uid, data in users.items() if data.get('group') == group_name and data.get('status') == 'allowed']
        
        if not user_list:
            bot.reply_to(message, f"–í –≥—Ä—É–ø–ø–µ '{group_name}' –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return

        for user_id in user_list:
            try:
                bot.send_message(user_id, text_to_send)
                sent_count += 1
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        bot.reply_to(message, f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {len(user_list)} —É—á–µ–Ω–∏–∫–æ–≤.")
    except IndexError:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <group_name> <–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ>")

@bot.message_handler(commands=['listgroups'], func=is_admin)
def list_groups(message):
    groups = {}
    for user_id, data in users.items():
        if data.get('status') != 'allowed': continue # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤

        group = data.get('group', '–ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ') # –£—á–µ–Ω–∏–∫–∏ –±–µ–∑ –≥—Ä—É–ø–ø—ã –ø–æ–ø–∞–¥–∞—é—Ç —Å—é–¥–∞
        if group not in groups:
            groups[group] = []
        groups[group].append(f"{data.get('first_name', 'N/A')} (`{user_id}`)")
    
    if not groups:
        bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.")
        return
        
    reply = "üë• –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ —É—á–µ–Ω–∏–∫–æ–≤:\n\n"
    for group_name, members in sorted(groups.items()):
        reply += f"*{group_name}*:\n"
        for member in members:
            reply += f"  - {member}\n"
        reply += "\n"
    bot.reply_to(message, reply, parse_mode='Markdown')


# --- –õ–û–ì–ò–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ò –û–î–û–ë–†–ï–ù–ò–Ø (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = str(message.from_user.id)
    if user_id in users and users[user_id]['status'] == 'allowed':
        group_info = f"–í—ã –≤ –≥—Ä—É–ø–ø–µ: *{users[user_id].get('group', '–ë–µ–∑ –≥—Ä—É–ø–ø—ã')}*"
        bot.reply_to(message, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω—ã –∏ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n{group_info}", parse_mode='Markdown')
    elif user_id in users and users[user_id]['status'] == 'pending':
        bot.reply_to(message, "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –≤—Å–µ –µ—â–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
    else:
        first_name = message.from_user.first_name
        username = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        users[user_id] = {'first_name': first_name, 'username': username, 'status': 'pending', 'group': None}
        save_users(users)
        bot.reply_to(message, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")
        
        markup = types.InlineKeyboardMarkup()
        btn_allow = types.InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"allow_{user_id}")
        btn_reject = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
        markup.add(btn_allow, btn_reject)
        admin_text = f"‚ùóÔ∏è –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø:\n–ò–º—è: {first_name}\nUsername: @{username}\nID: `{user_id}`"
        bot.send_message(ADMIN_ID, admin_text, reply_markup=markup, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.from_user.id == ADMIN_ID)
def handle_approval(call):
    action, user_id = call.data.split('_')
    if user_id in users:
        new_status = 'allowed' if action == 'allow' else 'rejected'
        users[user_id]['status'] = new_status
        save_users(users)
        bot.edit_message_text(f"–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: {new_status} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.", call.message.chat.id, call.message.message_id)
        if new_status == 'allowed':
            bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        else:
            bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

# --- –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = str(message.from_user.id)
    if user_id not in users or users[user_id].get('status') != 'allowed':
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.")
        return
    if not model:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥–µ–ª—å –ò–ò –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
        return
    try:
        response = model.generate_content(message.text)
        bot.reply_to(message, response.text)
    except Exception as e:
        print(f"!!! –ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê: {e}")
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

# --- –ó–ê–ü–£–°–ö ---
if __name__ == "__main__":
    flask_thread = threading.Thread(target=run_flask_app)
    flask_thread.start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    bot.polling(non_stop=True)
